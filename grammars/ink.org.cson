fileTypes: [
  "ink"
  "ink2"
]
name: "ink"
patterns: [
  {
    include: "#comments"
  }
  {
    captures:
      "1":
        name: "markup.punctuation"
      "2":
        name: "keyword.function"
      "3":
        name: "entity.name.knot"
      "4":
        name: "variable.parameter"
      "5":
        name: "markup.punctuation"
    match: "^\\s*(={2,})\\s*(function)?\\s*(\\w+)\\s*(\\([^)]*\\))?\\s*(={1,})?"
    name: "meta.knot.declaration"
  }
  {
    captures:
      "1":
        name: "markup.punctuation"
      "2":
        name: "keyword.function"
      "3":
        name: "entity.name.knot"
      "4":
        name: "variable.parameter"
      "5":
        name: "markup.punctuation"
    match: "^\\s*(=)\\s*(\\w+)\\s*(\\([^)\\n]*\\))?\\s*$"
    name: "meta.stitch.declaration"
  }
  {
    include: "#choice"
  }
  {
    include: "#gather"
  }
  {
    include: "#statements"
  }
]
repository:
  TODO:
    captures:
      "1":
        name: "comment.todo.TODO"
      "2":
        name: "comment.todo.TODO"
    end: "$\\n?"
    match: "^\\s*(?:(TODO\\s*:)|(TODO\\b))\\s*(.*)"
    name: "comment.todo"
  choice:
    begin: "^\\s*((?:[\\*\\+]\\s?)+)\\s*(\\(\\s*(\\w+)\\s*\\))?"
    beginCaptures:
      "1":
        name: "keyword.operator.weaveBullet.choice"
      "2":
        name: "meta.label"
      "3":
        name: "entity.name.label"
    end: "$\\n?"
    name: "choice"
    patterns: [
      {
        include: "#comments"
      }
      {
        captures:
          "1":
            name: "keyword.operator.weaveBracket"
          "2":
            name: "string.content"
          "3":
            name: "keyword.operator.weaveBracket"
        match: "(\\[)([^\\]]*)(\\])"
      }
      {
        include: "#divert"
      }
      {
        include: "#mixedContent"
      }
    ]
  comments:
    patterns: [
      {
        begin: "/\\*\\*"
        captures:
          "0":
            name: "punctuation.definition.comment.json"
        end: "\\*/"
        name: "comment.block.documentation.json"
      }
      {
        begin: "/\\*"
        captures:
          "0":
            name: "punctuation.definition.comment.json"
        end: "\\*/"
        name: "comment.block.json"
      }
      {
        captures:
          "1":
            name: "punctuation.definition.comment.json"
        match: "(//).*$\\n?"
        name: "comment.line.double-slash.js"
      }
    ]
  divert:
    captures:
      "1":
        name: "keyword.operator.divert"
      "3":
        name: "keyword.done"
      "4":
        name: "keyword.end"
      "5":
        name: "variable.divertTarget"
    match: "(->|<-)\\s*((?:(DONE)|(END)|(\\w+))(?:\\s*\\.\\s*(?:\\w+))*\\s*(?:\\([^\\)]+\\))?)?"
    name: "meta.divert"
  gather:
    captures:
      "1":
        name: "keyword.operator.weaveBullet.gather"
      "2":
        name: "meta.label"
      "3":
        name: "entity.name.label"
    match: "^\\s*((?:-\\s*)+)(?!>)(\\(\\s*(\\w+)\\s*\\))?"
    name: "meta.gather"
  globalVAR:
    begin: "^\\s*((VAR|CONST)\\s*(\\w+))\\s*"
    beginCaptures:
      "1":
        name: "meta.variable.declaration"
      "2":
        name: "storage"
      "3":
        name: "entity.name.variable"
    end: "$\\n?"
    name: "meta.variable.assignment"
  inlineConditional:
    begin: "(\\{)[^:\\|\\}]+:"
    beginCaptures:
      "1":
        name: "keyword.operator.inlineConditionalStart"
    end: "(\\})"
    endCaptures:
      "1":
        name: "keyword.operator.inlineConditionalEnd"
    name: "entity.inlineConditional"
    patterns: [
      {
        match: "\\|"
        name: "keyword.operator.inlineConditionalBranchSeparator"
      }
      {
        include: "#mixedContent"
      }
    ]
  inlineLogic:
    begin: "(\\{)"
    beginCaptures:
      "1":
        name: "keyword.operator.inlineLogicStart"
    end: "(\\})"
    endCaptures:
      "1":
        name: "keyword.operator.inlineLogicEnd"
    name: "meta.logic"
  inlineSequence:
    begin: "(\\{)\\s*(~|&|!|\\$)?(?=([^\\|]*\\|(?!\\|)[^\\}]*)\\})"
    beginCaptures:
      "1":
        name: "keyword.operator.inlineSequenceStart"
      "2":
        name: "keyword.operator.inlineSequenceTypeChar"
    end: "\\}"
    endCaptures:
      "0":
        name: "keyword.operator.inlineSequenceEnd"
    name: "entity.inlineSequence"
    patterns: [
      {
        match: "\\|(?!\\|)"
        name: "keyword.operator.inlineSequenceSeparator"
      }
      {
        include: "#mixedContent"
      }
    ]
  logicLine:
    captures:
      "0":
        name: "meta.logic"
    match: "\\s*(~\\s*.*)$"
  mixedContent:
    patterns: [
      {
        include: "#inlineConditional"
      }
      {
        include: "#inlineSequence"
      }
      {
        include: "#inlineLogic"
      }
      {
        include: "#divert"
      }
      {
        match: "<>"
        name: "constant.glue"
      }
    ]
  multiLineLogic:
    begin: "^\\s*(\\{)([\\w_\\s\\*\\/\\-\\+\\&\\|\\%\\<\\>\\.\\(\\)]+(:))?(?=[^}]+$)"
    beginCaptures:
      "0":
        name: "meta.logicBegin"
      "1":
        name: "keyword.operator.logic"
      "3":
        name: "keyword.operator.logic"
    contentName: "meta.multilineLogicInner"
    end: "(\\})"
    endCaptures:
      "1":
        name: "keyword.operator"
    name: "meta.multilineLogic"
    patterns: [
      {
        match: "^\\s*else\\s*\\:"
        name: "conditional.else"
      }
      {
        begin: "^\\s*(-)\\s?[^:]+(:)"
        beginCaptures:
          "1":
            name: "keyword.operator"
          "2":
            name: "keyword.operator"
        end: "$\\n?"
        name: "conditional.clause"
        patterns: [
          {
            include: "#mixedContent"
          }
        ]
      }
      {
        include: "#statements"
      }
    ]
  statements:
    patterns: [
      {
        include: "#comments"
      }
      {
        include: "#TODO"
      }
      {
        include: "#globalVAR"
      }
      {
        include: "#choice"
      }
      {
        include: "#gather"
      }
      {
        include: "#multiLineLogic"
      }
      {
        include: "#endOfSection"
      }
      {
        include: "#logicLine"
      }
      {
        include: "#mixedContent"
      }
    ]
scopeName: "source.ink"
